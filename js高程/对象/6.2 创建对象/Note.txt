构造函数模式

    与工厂模式的区别：
        1、没有显式的创建对象；
        2、直接将属性和方法赋给了this；
        3、没有return；

    始终以大写字母开头；
    需要使用new操作符创造新的实例；

    关于return的内容，对于不加new来执行函数来说，this指向window，
    返回值就是函数的执行结果，对于加new关键字来执行函数而言，
    如果return的是基本数据类型，那么忽视掉该return值，
    如果返回的是一个对象类型，那么新的实例就指向该对象类型。

    缺点：
    在构造函数中创建的方法，会在每个实例中重新创建一遍，如：
        person1.sayName == person2.sayName  // false
    原因在于方法也是对象，在实例化方法时等同于执行了 new Function();

    可通过原型模式解决该缺点；

原型链模式

    理解原型链：
        function Person() {
            Person.prototype.name = "Xin";
            Person.prototype.age = "24";
            Person.prototype.sayName = function() {
                alert(this.name);
            }
        }
        var person1 = new Person();
        person1.name = "Other";
        alert(person1.name); // "Other"
        var person2 = new Person();
        alert(person2.name); // "Xin"

        如上例所示，person1和person2通过原型链都继承了Person的属性；
        person1在修改了name属性后获得了自身的name属性，而person1和Person并不会受影响。
        这是因为，代码读取对象的某个属性时会优先从其自身属性中寻找目标属性，如果找不到则通过原型链向上寻找。
        当对象实例修改的属性与原型中继承的属性值相同时，会自身新建一个属性，代码首先从对象实例中找到了匹配的属性，便不会继续从原型中去找。
        也就是对象自身的属性会屏蔽掉原型链中的同名属性。
        通过hasOwnProperty()方法，我们可以知道改属性是对象实例自身的属性还是继承至原型链的属性，如：
        person1.hasOwnProperty('name'); // true 来自实例
        person2.hasOwnProperty('name'); // false 来自原型
        通过delete操作符我们可以删除实例自身的属性，这时候再次使用该属性时则会返回原型链中该属性的值，如：
        delete person1.name;
        alert(person1.name); // "Xin"

